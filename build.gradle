plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.2.1"
    id("io.micronaut.aot") version "4.2.1"
    id "org.flywaydb.flyway" version "9.8.1"
    id 'checkstyle'
}

version = "0.1"
group = "com.lulugyda"

repositories {
    mavenCentral()
}

project.checkstyle {
    toolVersion '8.40'
    configFile project.file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi:4.5.2")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client")
    implementation "io.swagger.core.v3:swagger-annotations:2.2.2"
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("org.flywaydb:flyway-database-postgresql:10.0.1")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation 'org.postgresql:postgresql:x.y.z'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.3.Final"
    compileOnly "org.mapstruct:mapstruct:1.5.3.Final"
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")
    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    runtimeOnly("io.micronaut.sql:micronaut-jdbc-tomcat")
    testImplementation 'org.mockito:mockito-inline:3.12.4'

    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("jakarta.validation:jakarta.validation-api")
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")

}

application {
    mainClass.set("com.lulugyda.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}


graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.lulugyda.*")
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}

project.tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll(['--release', '17'])
    options.compilerArgs.add('-parameters')
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}


